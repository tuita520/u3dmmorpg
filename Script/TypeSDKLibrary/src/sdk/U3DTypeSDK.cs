// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
//  skd接口类
//
//  在使用 登录 登出 购买 等之类接口前 请务必设置平台所需参数
//  使用例子：

//  当前sdk当成功更新，登录，登出，支付后 都会发送消息
//  接受消息的例子请看demo
//  消息会发出一个 Typeeventdata的对象 其中的data 当在登录时，是Typelogindata
//					     当在支付后 是 Typepayresultdata
//
//使用的例子：
//		U3DTypeSDK.Instance.platformData.appID = 4597;
//		U3DTypeSDK.Instance.platformData.appKey = "07c05293112bf3c4d090ebc330044ed0";
//		U3DTypeSDK.Instance.platformData.evtDelegate +=NotifyTypeLogin;
//		U3DTypeSDK.Instance.platformData.IsOpenRecharge = true;
//
//
//U3DTypeSDK.Instance.platformData.evtDelegate +=NotifyTypeLogin;//添加事件侦听
//void NotifyTypeLogin(U3DTypeEvent evt)
//	{
//		System.Console.WriteLine ("notify event type " + evt.evtType);
//		if(evt!=null && evt.evtType == TypeEventType.EVENT_LOGIN_SUCCESS)
//		{
//			System.Console.WriteLine("success notify degele do login success");
//			U3DTypePayData payData = new U3DTypePayData ();
//			payData.realPrice = 2;
//			U3DTypeSDK.Instance.U3D_TypeSDKBuyItem (payData);
//			U3DTypeSDK.Instance.U3D_TypeSDKShowPersonCenter();
//		}
//	}
//
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Xml;

public class U3DTypeSDK :

	Notify_Type_Common


{

	private static volatile U3DTypeSDK _instance; 
	private static object syncRoot = new object(); 
	private static  GameObject _container;

	private volatile U3DTypeBaseData _userData=null ;
//	public volatile U3DTypePlatformData		platformData; 
	private Dictionary<TypeEventType,U3DTypeEventDelegate>	_delegateDic; 						
	private bool isInitSelf = false;
	private TypeBonjour bonjour = new TypeBonjour();
		

	private U3DTypeSDK():base()
	{

	}
	//获得sdk 实例U3DTypeSDK
	public static U3DTypeSDK Instance
	{
		get  
		{ 
			if(null == _instance)
			{
				_container = new GameObject();
				_container.name = "TypeSDK";
				UnityEngine.Object.DontDestroyOnLoad(_container);
				lock(syncRoot)
				{
					if(null == _instance)
					{
						_instance = _container.AddComponent(typeof(U3DTypeSDK))as U3DTypeSDK;

						_instance._delegateDic = new Dictionary<TypeEventType, U3DTypeEventDelegate>();
					}
				}
			}
		return _instance; 
		} 
	}
	public void InitSDK()
	{
        U3DTypeEventListener.Instance.InitSelf();
		_instance.selfInit();
	}

	public U3DTypeBaseData GetUserData()
	{
		if(null == _userData)
			_userData = bonjour.GetUserData();

		return _userData;
	}
	public U3DTypeBaseData GetPlatformData()
	{
		return bonjour.GetPlatformData();
	}
	//显示登录平台的方法
	public void Login()
	{
		//if has not self init return and wait receive update event
		if(!selfInit ())
		{
			Debug.Log("has not self init");
			return ;
		}
		Debug.Log("do login ");
		bonjour.ShowLogin();
		Debug.Log("do login finisth");

	}
    //腾讯登录方式，loginType:1为QQ登录，2为微信登录
    public void Login(string loginType) {
        if (!selfInit())
        {
            Debug.Log("has not self init");
            return;
        }
        Debug.Log("do YSDK login ");
        bonjour.ShowLogin();
        Debug.Log("do YSDK login finisth");



    }
	//登出平台
	public  void Logout()
	{
//		selfInit ();
		bonjour.ShowLogout();
	}

	public int  LoginState()
	{
		return bonjour.LoginState();

	}

	/**
	 * eg:
	 * 			payData.SetData(U3DTypeAttName.REAL_PRICE,"100");
			payData.SetData(U3DTypeAttName.ITEM_NAME,"sk bi");
			payData.SetData(U3DTypeAttName.ITEM_DESC,"desc");
			payData.SetData(U3DTypeAttName.ITEM_COUNT,"1");
			payData.SetData(U3DTypeAttName.ITEM_SEVER_ID,"id");
			payData.SetData(U3DTypeAttName.SEVER_ID,"1");
			payData.SetData(U3DTypeAttName.EXTRA,"extra");
			
	 * 支付函数
	 * @param _in_pay pay object 支付对象的结构体 若至少传入 一个 价格 
	 * 
	 * @return bill number
	 */
	public string PayItem(U3DTypeBaseData _in_pay)
	{
//		selfInit ();

        Debug.Log("U3D_Type sdk buy item");
		string  billNo =  bonjour.PayItem(_in_pay);

		return billNo;
	}
	//显示用户中心
	public void ShowPersonCenter()
	{
//		selfInit ();

		bonjour.ShowPersonCenter();
	}
	//隐藏用户中心（若平台sdk存在该方法）
	public void HidePersonCenter()
	{
//		selfInit ();
		bonjour.HidePersonCenter();
	}
	public void ShowToolBar()
	{
		bonjour.ShowToolBar();
	}
	public void HideToolbar()
	{
		bonjour.HideToolBar();
	}


	public void UpdatePlayerInfo()
	{
		U3DTypeBaseData cacheUser = GetUserData();
		Debug.Log("send player info : "+ cacheUser.DataToString());
		bonjour.SetPlayerInfo(cacheUser);
	}
	public void ShowShare(U3DTypeBaseData _in_data)
	{
		bonjour.ShowShare(_in_data);
	}
	public void CallCopyClipboard(U3DTypeBaseData _in_data)
	{
		bonjour.CopyClipboard(_in_data);
	}
	public bool IsHasRequest(String requestType)
	{
		return bonjour.IsHasRequest(requestType);
	}
	public void Destory()
	{
		bonjour.Destory();
	}
	public void ExitGame()
	{
		bonjour.ExitGame();
	}
	public void DoAnyFunction(string _func_name,U3DTypeBaseData _in_data)
	{
		bonjour.DoAnyFunction(_func_name,_in_data);
	}
	public string DoPhoneInfo()
	{
		return bonjour.DoPhoneInfo ();
	}
	public void AddLocalPush(U3DTypeBaseData _pushData)
	{
		Debug.Log("AddLocalPush in u3dType sdk : "+ _pushData.DataToString());

		bonjour.AddLocalPush (_pushData);
	}
	public void RemoveLocalPush(string pushid)
	{
		bonjour.RemoveLocalPush (pushid);
	}
    public void RemoveAllLocalPush()
	{
		bonjour.RemoveAllLocalPush ();
	}
	public void GetUserFriends()
	{
		bonjour.GetUserFriends ();
	}
	/////////////////private functions ///////
	private bool selfInit()
	{
		if (isInitSelf) return true;
		isInitSelf = true;

//		AnalyXMLData();

		bonjour.initSDK();
		return false;
	}

	/**
	private void AnalyXMLData()
	{
		XmlDocument xmlDoc= TypeSDKTool.XmlTool.readXMLBelowAsster(U3DTypeDefine.Type_SDK_CONFIG_PATH);
		U3DTypeBaseData platformData = GetPlatformData();
		if(xmlDoc!=null)
		{
			XmlNodeList nodeList = xmlDoc.SelectSingleNode("data").ChildNodes;
			foreach(XmlElement sdk in nodeList)
			{
				foreach(XmlElement sdkEle in sdk.ChildNodes)
				{
					//					Debug.Log("\n"+ sdkEle.Name+" : "+sdkEle.InnerText+"<<");
					;
					if(null!=platformData.GetType().GetField(sdkEle.Name)
					   )
					{
						Debug.Log("change element name: "+ sdkEle.Name);
						if(null!=platformData.GetType().GetField(sdkEle.Name))
						{
						}
						else 
						{
							platformData.GetType().GetField(sdkEle.Name).SetValue(platformData,sdkEle.InnerText);
						}
//						Debug.Log("\n"+ sdkEle.Name + ":--:"+
//						          platformData.GetType().GetField(sdkEle.Name).GetValue(platformData).ToString()
//						          );
					}
				}
			}
		}
	}
*/

	public void AddEventDelegate(TypeEventType _in_type,U3DTypeEventDelegate _in_delegate)
	{

		if( !_delegateDic.ContainsKey(_in_type))
		{
			_delegateDic.Add(_in_type,_in_delegate);
			return;
		}
		else
		{
			U3DTypeEventDelegate cacheDelegate = _delegateDic[_in_type];
			cacheDelegate+=_in_delegate;
		}
		Debug.Log("success add degelet ");
	}
	public void RemoveEventDelegate(TypeEventType _in_type)
	{
		if( _delegateDic.ContainsKey(_in_type))
		{
			_delegateDic.Remove(_in_type);
		}
	}


	public  void SendEvent(TypeEventType _in_type,U3DTypeBaseData _in_data )
	{

		U3DTypeEvent evt = new U3DTypeEvent (_in_type,_in_data);

		if(null!=_in_data)
			Debug.Log(">>>>send event<<<<< type "+ _in_type + "data" + _in_data.DataToString());
		else
			Debug.Log(">>>>send event<<<<< type "+ _in_type + "null data" );


		Debug.Log("delegate dic start");
		if(_delegateDic.ContainsKey(_in_type))
		{
			if(_delegateDic[_in_type]!=null)
			{
                Debug.Log("find delegate " + _delegateDic[_in_type].ToString());
				U3DTypeEventDelegate _delegate = _delegateDic[_in_type];
				_delegate(evt);
//				_delegateDic[_in_type](evt);
			}
		}
		else
		{
			Debug.Log("dic didnot has key");
		}
	}


	public void SendEvent(TypeEventType _in_type)
	{
		SendEvent (_in_type, new U3DTypeBaseData());
	}
}

